@{
    ViewBag.Title = "Home Page";
}
@model QuanLyNhanSu.Web.Models.DashboadModel
@using QuanLyNhanSu.Web.Models;
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
<div class="row">
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">
                    Dashboard <small></small>
                </h1>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <i class="fa fa-bar-chart-o fa-fw"></i>Branchs
                        <div class="pull-right">
                            <div class="btn-group">
                                <button type="button" class="btn btn-default btn-xs dropdown-toggle" data-toggle="dropdown">
                                   @Model.FromDate.ToString("MM/dd/yyyy")~@Model.ToDate.ToString("MM/dd/yyyy")
                                    <span class="caret"></span>
                                </button>
                                <div class="dropdown-menu pull-right">
                                    <li>
                                        <a href="#" onclick="ShowTimePicker(1);"><span class="fa fa-calendar"></span>Chart by date</a>
                                    </li>
                                    <li>
                                        <a href="#" onclick="ShowTimePicker(2);"><span class="fa fa-calendar"></span>Chart by month</a>
                                    </li>
                                    <li>
                                        <a href="#" onclick="ShowTimePicker(3);"><span class="fa fa-calendar"></span>Chart by year</a>
                                    </li>
                                    <li>
                                        <a href="#" onclick="ShowTimePicker(4);"><span class="fa fa-calendar"></span> Chart group by date</a>
                                    </li>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div id="divBarChart1">
                <div class="chart-container" id="chartPanel">
                    <canvas id="myBarChart"></canvas>
                </div>
            </div>
            </div>
            <div class="row" id="divChartByBranch" style="display:none;">
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <i class="fa fa-bar-chart-o fa-fw"></i><label id="divBrandSelected"> Revenue by brand</label>
                        </div>
                        <div class="panel panel-body" id="chartPanel">
                            <div id="myBarChartByBranch"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" id="divChartByStore" style="display:none;">
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <i class="fa fa-bar-chart-o fa-fw"></i><label id="divStoreSelected"> Revenue by store</label>
                        </div>
                        <div class="panel-body" id="chartPanel">
                            <div id="myBarChartByStore" style="width:100%; height:500px"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
<div class="modal fade" id="divSelectTime" tabindex="-1" role="dialog" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title" id="myModalLabel">Select date</h4>
            </div>
            <div class="modal-body">
                <div class="row" id="divDate">
                    <div class="input-group input-daterange" id="divDate">
                        @Html.EditorFor(model => model.FromDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                        <div class="input-group-addon">to</div>
                        @Html.EditorFor(model => model.ToDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                    </div>
                </div>
               
                <div class="input-group input-daterange" id="divYear">
                    <input type="text" id="frmYear" class="form-control">
                    <div class="input-group-addon">to</div>
                    <input type="text" id="toYear" class="form-control" >
                </div>
                <div class="input-group input-daterange" id="divMonth">
                    <input type="text" id="frmMonth" class="form-control">
                    <div class="input-group-addon">to</div>
                    <input type="text" id="toMonth" class="form-control">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" onclick="UpdateChart();">@QuanLyNhanSu.Commons.ControlText.Search</button>
            </div>
        </div>
    </div>
</div>
<style type="text/css">
    .clsDatePicker {
        z-index: 100000;
    }
    .datepicker {
        z-index:1051 !important;
        }
</style>
<script src="/js/jquery-1.10.2.js"></script>
<script type="text/javascript">
    var SelectType = 1;
    var ToDateSelected = "";
    var FromSelected = "";
    var BranchID = "";
    var frmDate;
    var width = $(window).width();
    var height = $(window).height();
    var hasShowLegend = true;
    if ((width >= 1024) && (height >= 768)) {
        //do something
        hasShowLegend = true;
    }
    else {
        hasShowLegend = true;
    }
    var ShowTimePicker = function (s) {
        SelectType = s;
        switch (s) {
            case 4:
            case 1:
                $("#divDate").show();
                $("#divMonth").hide();
                $("#divYear").hide();
                break;
            case 2:
                $("#divDate").hide();
                $("#divMonth").show();
                $("#divYear").hide();
                break;
            case 3:
                $("#divDate").hide();
                $("#divMonth").hide();
                $("#divYear").show();
                break;
        }
        $("#divSelectTime").modal('show');
    };
    
    var UpdateChart = function () {
        var fromdate = $("#FromDate").val();
        FromSelected = fromdate;
        var todate = $("#ToDate").val();
        switch (SelectType) {
            case 1:
            case 4:
                break;
            case 2:
                fromdate = $("#frmMonth").val()+"-01";
                todate = $("#toMonth").val() + "-01";
                break;
            case 3:
                fromdate = $("#frmYear").val() + "-01-01";
                todate = $("#toYear").val() + "-01-01";
                break;
        }
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetCharts", "Dashboad")?fromdate=' + fromdate + '&todate=' + todate + '&type=' + SelectType,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                $("#divLoading").modal('show');
            },
            success: function (data) {
                if (data.title == "")
                {
                    $("#divLoading").modal('hide');
                    return;
                }
                for (var i = 0; i < data.data.length; i++) {
                    data.data[i].click = selectColumn;
                }
                $('#myBarChart').remove();
                $('#chartPanel').append('<canvas id="myBarChart"></canvas>');
                var ctx = document.getElementById('myBarChart').getContext('2d');
                var chart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.labels,
                        datasets:data.data,
                    },
                    options: {
                        title: {
                            text: [data.title,data.Subtitle],
                            display: true,
                            position: 'bottom'
                        },
                        legend: {
                            display: hasShowLegend,
                            position: 'right',
                            reverse:true
                        },
                        elements: {
                            rectangle: {
                                borderSkipped: 'left',
                            }
                        },
                        responsive: true,
                        scales: {
                            xAxes: [{
                                display: true,
                                scaleLabel: {
                                    display: true,
                                    labelString: data.titlex
                                },
                                barPercentage: 1,
                                categoryPercentage: 0.5
                            }],
                            yAxes: [{
                                display: true,
                                scaleLabel: {
                                    display: hasShowLegend,
                                    labelString: data.titley,
                                    fontStyle: 'bold',
                                },
                                
                                ticks: {
                                    callback: function (value, index, values) {
                                        return number_format(value,0,","," ");
                                        }
                                }
                            }]
                        }
                    }
                });
                var scrollPos = $("#myBarChartByBranch").offset().top;
                $(window).scrollTop(scrollPos);
                $("#divLoading").modal('hide');
            },
            error: function () {
                alert("System have error!");
            }
        });
        $("#divSelectTime").modal('hide');
    }
    function number_format(number, decimals, dec_point, thousands_sep) {
        // *     example: number_format(1234.56, 2, ',', ' ');
        // *     return: '1 234,56'
        number = (number + '').replace(',', '').replace(' ', '');
        var n = !isFinite(+number) ? 0 : +number,
                prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
                sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
                dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
                s = '',
                toFixedFix = function (n, prec) {
                    var k = Math.pow(10, prec);
                    return '' + Math.round(n * k) / k;
                };
        // Fix for IE parseFloat(0.55).toFixed(0) = 0;
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
        if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
    }
    function selectColumn(e) {
        ToDateSelected = e.dataPoint.label;
        switch (SelectType) {
            case 1:
                FromSelected = e.dataPoint.label;
                ToDateSelected = e.dataPoint.label;
                break;
            case 4:
                var arrDate = e.dataPoint.label.split('~');
                FromSelected = arrDate[0];
                ToDateSelected = arrDate[1];
                break;
            case 2:
                FromSelected = e.dataPoint.label + "-01";;
                ToDateSelected = e.dataPoint.label + "-01";
                break;
            case 3:
                FromSelected = e.dataPoint.label + "-01-01";
                ToDateSelected = e.dataPoint.label + "-01-01";
                break;
        }
        BranchID = e.dataPoint.name;
        $("#divBrandSelected").html("Revenue of Brand "+BranchID);
        UpdateChartByBranch(FromSelected,ToDateSelected, e.dataPoint.name, SelectType);
    };
    function selectByStore(e) {
        $("#divStoreSelected").html("Revenue of Store " + e.dataPoint.label);
        UpdateChartByStore(FromSelected, ToDateSelected, BranchID,e.dataPoint.name, SelectType);
    };
    function toggleDataSeries(e) {
        if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
            e.dataSeries.visible = false;
        } else {
            e.dataSeries.visible = true;
        }
        e.chart.render();
    };
    var UpdateChartByBranch = function (fromdate,todate, branchID, SelectType) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetChartByBranch", "Home")?fromdate=' + fromdate + '&todate=' + todate + '&branchID=' + branchID + '&selectType=' + SelectType,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                $("#divLoading").modal('show');
            },
            success: function (data) {
                $("#divChartByBranch").css("display", "block");
                for (var i = 0; i < data.data.length; i++) {
                    data.data[i].click = selectByStore;
                }
                var chart2 = new CanvasJS.Chart("myBarChartByBranch", {
                    title: {
                        text: data.title,
                    },
                    subtitles: [
		            {
		                text: data.Subtitle,
		            }],
                    animationEnabled: true,
                    animationDuration: 2000,
                    dataPointMaxWidth: 20,
                    axisX: {
                        title: data.titlex,
                    },
                    axisY: {
                        title: data.titley,
                        valueFormatString: "#,###.###",
                    },
                    toolTip: {
                        enabled: true,
                        shared: true
                    },
                    data: data.data
                });
                chart2.render();
                var scrollPos = $("#myBarChartByStore").offset().top;
                $(window).scrollTop(scrollPos);
                $("#divLoading").modal('hide');
            },
            error: function () {
                alert("Have some error");
            }
        });
    };
    var UpdateChartByStore = function (fromdate,todate, branchID,store, SelectType) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetChartByStore", "Home")?fromdate=' + fromdate + '&todate=' + todate + '&branchID=' + branchID + '&store=' + store + '&selectType=' + SelectType,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                $("#divLoading").modal('show');
            },
            success: function (data) {
                $("#divChartByStore").css("display", "block");
                for (var i = 0; i < data.data.length; i++) {
                    //data.data[i].click = selectByStore;
                }
                var chart3 = new CanvasJS.Chart("myBarChartByStore", {
                    title: {
                        text: data.title,
                    },
                    subtitles: [
		            {
		                text: data.Subtitle,
		            }],
                    animationEnabled: true,
                    animationDuration: 2000,
                    dataPointMaxWidth: 20,
                    axisX: {
                        title: data.titlex,
                    },
                    axisY: {
                        title: data.titley,
                        valueFormatString: "#,###.###",
                    },
                    data: data.data
                });
                chart3.render();
                $("#divLoading").modal('hide');
            },
            error: function () {
                alert("Have some error");
            }
        });
    }
    $(document).ready(function () {
        Chart.defaults.global.defaultFontFamily = '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
        Chart.defaults.global.defaultFontColor = '#292b2c';
        $('#FromDate').datetimepicker({ format: 'MM/DD/YYYY',  locale: 'en' });
        $('#ToDate').datetimepicker({ format: 'MM/DD/YYYY', locale: 'en' });

        $('#frmMonth').datetimepicker({ format: 'M-YYYY', viewMode: "months",  locale: 'en' });
        $('#toMonth').datetimepicker({ format: 'M-YYYY', viewMode: "months", locale: 'en' });

        $('#frmYear').datetimepicker({ format: 'YYYY', viewMode: "years", locale: 'en' });
        $('#toYear').datetimepicker({ format: 'YYYY', viewMode: "years", locale: 'en' });
        UpdateChart();
    });
</script>